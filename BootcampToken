//SPDX-License-Identifier: UNLICENSED

// Solidity files have to start with this pragma.
// It will be used by the Solidity compiler to validate its version.
pragma solidity ^0.8.0;

contract BootcampToken {
    string public name = "Bootcamp Token";
    string public symbol = "BCT";
    uint256 public decimals = 0;
    uint256 public totalSupply = 1000000;
    address public owner;

    mapping(address => uint256) balances;
    mapping(address => uint256) public lockedBalances;
    mapping(address => uint256) public lockExpiration;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Lock(address indexed account, uint256 value, uint256 unlockTimestamp);

    constructor() {
        balances[msg.sender] = totalSupply;
        owner = msg.sender;
    }

    // "transfer" Fonksiyonu Reentrancy Attack'larına karşı savunmasız!
    // function transfer(address to, uint256 amount) external {
    //     require(balances[msg.sender] >= amount, "Not enough tokens");
    //     balances[msg.sender] -= amount;
    //     balances[to] += amount;
    //     emit Transfer(msg.sender, to, amount);
    // }
    // Yukarıdaki transfer fonksiyonundaki güvenlik açıkları aşağıda yazdığım "secureTransfer" fonksiyonu ile giderildi.
    function secureTransfer(address to, uint256 amount) external {
        // 1. LockedBalance'lar üzerinden işlemler gerçekleştireleceği için lockedBalance içerisinde transfer etmek istediğimiz miktarda token olup olmadığının kontrolü yapılır.
        require(
            lockedBalances[msg.sender] >= amount,
            "Not enough unlocked tokens"
        );
        // LockedBalance'taki tokenları 2 dakika sonra kullanılabilecek şekilde ayarladım.
        require(
            lockExpiration[msg.sender] < block.timestamp,
            "Your tokens are locked"
        );
        lockedBalances[msg.sender] -= amount;
        lockedBalances[to] += amount;
        emit Transfer(msg.sender, to, amount);
    }

    // balanceOf fonksiyonu doğrulama yapılmadan kullanıcının balance değerini direkt döndürdüğü için
    // kullanıcı taraflı veri gizliliğini ihlal etmektedir.
    // function balanceOf(address account) external view returns (uint256) {
    //     return balances[account];
    // }
    // Yukarıdaki "balanceOf" fonksiyonu yerine aşağıdaki "secureBalanceOf" fonksiyonu gibi kullanıcı
    // sadece kendi balance bilgisini görebilmesi daha uygun.
    function secureBalanceOf() external view returns (uint256) {
        return balances[msg.sender];
    }

    // 10 Dakikalık Kilitleme Fonksiyonu
    function lockTokens(uint256 value) external {
        require(
            lockExpiration[msg.sender] > block.timestamp,
            "Unlock time must be in the future"
        );
        require(balances[msg.sender] >= value, "Not enough tokens");

        balances[msg.sender] -= value;
        lockedBalances[msg.sender] += value;
        lockExpiration[msg.sender] = block.timestamp + 2 minutes;
        emit Lock(msg.sender, value, block.timestamp + 2 minutes);
    }

    // 2 dakikanın ardından bu fonksiyon ile kilitlenen tokanlar tekrar kullanıcının cüzdanına aktarılabilir.
    function unlockTokens() external {
        require(
            lockExpiration[msg.sender] <= block.timestamp,
            "Tokens are still locked"
        );
        uint256 value = lockedBalances[msg.sender];
        lockedBalances[msg.sender] = 0;
        balances[msg.sender] += value;
        lockExpiration[msg.sender] = 0;
    }
}
